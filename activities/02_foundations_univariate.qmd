---
title: "Univariate visualization and summaries"
subtitle: "Notes and in-class exercises"
---

# Notes

- You can download a template file to work with [here](../activity_templates/02_foundations_univariate.qmd).
- **File organization:** Save this file in the "Activities" subfolder of your "STAT155" folder.

## Learning goals

By the end of this lesson, you should be able to:

- Describe what a **case** (or **unit of analysis**) represents in a dataset.
- Describe what a **variable** represents in a dataset.
- Identify whether a variable is **categorical** or **quantitative** and what summarizations and visualizations are appropriate for that variable
- Write R code to read in data and to summarize and visualize a single variable at a time.
- Interpret key features of barplots, boxplots, histograms, and density plots
- Describe information about the distribution of a quantitative variable using the concepts of shape, center, spread, and outliers
- Relate summary statistics of data to the concepts of shape, center, spread, and outliers

## Readings and videos

Before class you should have read and/or watched:

- Reading: Sections 2.1-2.4, 2.6 in the [STAT 155 Notes](https://mac-stat.github.io/Stat155Notes/)
- Videos:
    - [Univariate visualization and summarization](https://youtu.be/7zQmWTT_m-Y) ([slides](https://drive.google.com/file/d/1QJgnchneN-cHfa2TNa-amBAx6VWO3UGT/view?usp=drive_link))
    - [R Code for Categorical Visualization and Summarization](https://voicethread.com/share/14968914/)
    - [R Code for Quantitative Visualization and Summarization](https://voicethread.com/share/14923042/)

## Review

**Cases**

When Macalester [advertises](https://www.macalester.edu/admissions/5-things-to-know-about-macalester/) an average class size of 17, what do you think the cases in this dataset represent?

::: {.callout-tip icon=false collapse="true" title="Response"}
Suppose we had just had 2 classes: one with a class size of 20 and the other with a class size of 28. If the cases are classes, the average class size is 24.

However, if the cases are students, the average class size looks like this:

```{r}
(20*20 + 28*28)/(20+28)
```

This is another viewpoint for what "average class size" means from the student perspective.

Note: From the student perspective (when cases are students), average class size will almost always be higher than when cases are classes.

(Thanks to [this post](https://weallcount.com/2019/07/11/auto-draft/) for the idea for this example.)
:::


<br><br><br><br>

**Univariate visualization**

In August 2018, the data journalism group [The Pudding](https://pudding.cool/) published an article about the size of men's and women's jeans pockets (called [Women's Pockets are Inferior](https://pudding.cool/2018/08/pockets/)).

We'll explore this data to review univariate visualization.

::: {.callout-tip icon=false title="Tips for navigating code"}
- Whenever you see a parenthesis `(`, you are using a **function**. Look at the text to the left of the `(` to see the function name. You can think of function names as **verbs**. They do things to data.
- Whenever you see an arrow `<-`, whatever is happening on the right is being stored in a "box" with the label on the left. (So the result of `read_csv()` is being stored in a "box" called `pockets`---`pockets` is the name/label of our dataset.)
:::

```{r message=FALSE}
library(readr)

pockets <- read_csv("https://raw.githubusercontent.com/the-pudding/data/master/pockets/measurements.csv")
```

The documentation (**codebook**) for this data is available [here](https://github.com/the-pudding/data/blob/master/pockets/README.md).

The `menWomen` variable is a categorical variable. We can use the code below to make a barplot to explore how many men's and women's jeans were examined.

::: {.callout-tip icon=false title="Tips for navigating code"}
- Inside parentheses (which indicate that a function is being called), look for lists of things separated by commas. The items in that list are **inputs** (also called **arguments**) for the function. These inputs supply essential information for the function.
- For plots, look for `+` signs. These indicate "layers" of a plot, kind of like layers of a painting.
:::

```{r}
library(ggplot2)

ggplot(pockets, aes(x = menWomen)) +
    geom_bar()
```

We can also tabulate categorical variables with the `count()` function from the `dplyr` data wrangling/manipulation package.

::: {.callout-tip icon=false title="Tips for navigating code"}
- The `%>%` symbol is called a **pipe**. It takes the object before it and feeds it in as the first input to the function after it. Whenever you see the pipe symbol, you can replace it in your mind with the words "and then".
:::

```{r message=FALSE}
library(dplyr)

pockets %>% 
    count(menWomen)
```

The `minHeightFront` variable gives the minimum height of the front pocket and is quantitative. For a single quantitative variable, we can make a boxplot, density plot, or histogram. Let's look at a histogram:

```{r}
ggplot(pockets, aes(x = minHeightFront)) +
    geom_histogram()
```

When you interpret a plot of a quantitative variable, there are 4 aspects to keep in mind:

1. Shape
2. Center
3. Spread
4. Outliers

**Shape**: How are values distributed along the observed range? What does the **distribution** of the variable look like?

```{r 02_shapes, fig.width=9, fig.height=6, echo=FALSE}
par(mfrow = c(2,3), mar = c(2,3,3,0.1))
set.seed(22)
n <- 1e6
x1 <- rnorm(n, mean = 10)
x2 <- rexp(n)
x3 <- ceiling(max(x2)) - x2
x4 <- c(rnorm(n/2, mean = 10), rnorm(n/2, mean = 15))
x5 <- runif(n, 1, 4)
plot(density(x1), xlab = "", ylab = "", main = "Symmetric", cex.main = 1.5)
plot(density(x2), xlab = "", ylab = "", main = "Right-skewed", cex.main = 1.5)
plot(density(x3), xlab = "", ylab = "", main = "Left-skewed", cex.main = 1.5)
plot(density(x4), xlab = "", ylab = "", main = "Bimodal", cex.main = 1.5)
plot(density(x5), xlab = "", ylab = "", main = "Uniform (flat)", cex.main = 1.5)
```

<br>

**Center:** What is a typical value of the variable?

- Quantified with summary statistics like the **mean** and **median**.

```{r 02_summary_stats}
summary(pockets$minHeightFront)
```

<br>

**Spread:** How spread out are the values? Are most values very close together or far apart?

- Quantified with summary statistics like the **variance**, **standard deviation**, **range** (difference between min and max), **interquartile range (IQR)**  (difference between the 75th percentile and 25th percentile)
- Interpretation of the variance: it is the average (roughly) squared distance of each value to the mean. Units are the squared version of the original variable.
- Interpretation of the standard deviation: square root of the variance. Measures spread on the same scale as the original variable (same units as the original variable).

```{r 02_spread_stats}
var(pockets$minHeightFront)
sd(pockets$minHeightFront)
```

<br>

**Outliers:** Are there any values that are particularly high or low relative to the rest?

<br>

**A good paragraph putting all of these aspects together:**

> The distribution of the minimum height of front pockets seems right skewed with values ranging from 9.5 to 25cm. The average pocket height is about 15cm (median). Pocket heights tend to deviate from this average by about 3.5cm (SD), and there don't seem to be extreme outliers.


<br><br><br><br>


# Exercises

> **Guiding question:** What anxieties have been on Americans' minds over the decades?

**Context:** *Dear Abby* is America's longest running advice column. Started in 1956 by Pauline Phillips under the pseudonym Abigail van Buren, the column continues to this day under the stewardship of her daughter Jeanne. Each column features one or more letters to Abby from anonymous individuals, all signed with a pseudonym. Abby's response follows each letter.

In 2018, the data journalism site [The Pudding](https://pudding.cool/) published a visual article called [30 Years of
American Anxieties](https://pudding.cool/2018/11/dearabby/) in which the authors explored themes in Dear Abby letters from 1985 to 2017. (We only have the questions, not Abby's responses.) The codebook is available [here](https://github.com/Mac-STAT/data/blob/main/dear_abby_codebook.md).

## Exercise 1: Get curious

- Hypothesize with each other: what themes do you think might come up often in Dear Abby letters?
- After brainstorming, take a quick glance at the original article from [The Pudding](https://pudding.cool/2018/11/dearabby/) to see what themes they explored.
- Go to the very end of the Pudding article to the section titled "Data and Method". In thinking about the who, what, when, where, why, and how of data context, what concerns/limitations surface with regards to using this data to learn about Americans' concerns over the decades?



## Exercise 2: Importing and getting to know the data

```{r setup, message=FALSE}
# Load package
library(readr)

# Read in the course evaluation data
abby <- read_csv("https://mac-stat.github.io/data/dear_abby.csv")
```

a. Click on the Environment tab (generally in the upper right hand pane in RStudio). Then click the `abby` line. The `abby` data will pop up as a separate pane (like viewing a spreadsheet) -- check it out.

b. In this **tidy** dataset, what is the unit of observation? That is, what is represented in each row of the dataset?

c. What term do we use for the columns of the dataset?

d. Try out each function below. Identify what each function tells you about the `abby` data and note this in the `???`:

```{r explore, eval=FALSE}
# ??? [what do both numbers mean?]
dim(abby)

# ???
nrow(abby)

# ???
ncol(abby)

# ???
head(abby)

# ???
names(abby)
```

e. We can learn what functions do by pulling up help pages. To do this, click inside the Console pane, and enter `?function_name`. For example, to pull up a help page for the `dim()` function, we can type `?dim` and hit Enter. Pull up the help page for the `head()` function.
    - Read the Description.
    - **Challenge:** Look at the **Arguments** and **Examples** sections to figure out how to display the first 10 rows of the `evals` data (instead of the default first 6 rows).



## Exercise 3: Preparing to summarize and visualize the data

In the next exercises, we will be exploring themes in the Dear Abby questions and the overall "mood" or sentiment of the questions. Before continuing, read the [codebook](https://github.com/Mac-STAT/data/blob/main/dear_abby_codebook.md) for this dataset for some context about sentiment analysis, which gives us a measure of the mood/sentiment of a text.

a. What sentiment variables do we have in the dataset? Are they **quantitative** or **categorical**?

b. If we were able to create a `theme` variable that took values like "friendship", "marriage", and "relationships", would `theme` be **quantitative** or **categorical**?

c. What visualizations are appropriate for looking at the distribution of a single quantitative variable? What about a single categorical variable?



## Exercise 4: Exploring themes in the letters

The `dplyr` package provides many useful functions for managing data (like creating new variables, summarizing information). The `stringr` package provides tools for working with strings (text). We'll use these packages to search for words in the questions in order to (roughly) identify themes/subjects.

The code below searches for words related to mothers, fathers, marriage, and money and combines them into a single `theme` variable.

- Inside `mutate()` the line `moms = ifelse(str_detect(question_only, "mother|mama|mom"), "mom", "no mom")` creates a new variable called `moms`. If any of the text "mother", "mama", or "mom" (which covers "mommy")  is found, then the variable takes the value "mom". Otherwise, the variable takes the value "no mom".
- The `dads`, `marriage`, and `money` variables are created similarly.
- The `themes = str_c(moms, dads, marriage, money, sep = "|")` line takes the 4 created variables and combines the text of those variables separated with a |. For example, one value of the `themes` variable is "mom|no_dad|no_marriage|no_money" (which contains words about moms but not dads, marriage, or money).

```{r message=FALSE}
library(dplyr)
library(stringr)

abby <- abby %>% 
    mutate(
        moms = ifelse(str_detect(question_only, "mother|mama|mom"), "mom", "no mom"),
        dads = ifelse(str_detect(question_only, "father|papa|dad"), "dad", "no dad"),
        marriage = ifelse(str_detect(question_only, "marriage|marry|married"), "marriage", "no marriage"),
        money = ifelse(str_detect(question_only, "money|finance"), "money", "no money"),
        themes = str_c(moms, dads, marriage, money, sep = "|")
    )
```

a. Modify the code above however you wish to replace themes (e.g., replace "moms" with something else) or add new themes to search for. If you want to add a new subject to search for, copy and paste a line for an existing subject above the `themes` line, and modify the code like this:
    - If your subject is captured by multiple words: `YOUR_SUBJECT = ifelse(str_detect(question_only, "WORD1|WORD2|ETC"), "SUBJECT", "NO SUBJECT"),`
    - If your subject is captured by a single word: `YOUR_SUBJECT = ifelse(str_detect(question_only, "WORD"), "SUBJECT", "NO SUBJECT"),`
    - Try to have no more than 6 subjects---otherwise we'll have too many themes, which will complicate exploration.

b. The code below makes a **barplot** of the `themes` variable using the `ggplot2` visualization package. *Before making the plot*, make note of what you expect the plot might look like. (This might be hard--just do your best!) *Then* compare to what you observe when you run the code chunk to make the plot. (Clearly defining your expectations first is good scientific practice to avoid confirmation bias.)

```{r eval=FALSE}
# Load package
library(ggplot2)

# barplot
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

c. We can follow up on the barplot with a simple numerical summary. Whereas the `ggplot2` package is great for visualizations, `dplyr` is great for numerical summaries. The code below constructs a table of the number of questions with each theme. Make sure that these numerical summaries match up with what you saw in the barplot.

```{r eval=FALSE}
# Construct a table of counts
abby %>% 
    count(themes)
```

d. Before proceeding, let's break down the plotting code above. Run each chunk to see how the two lines of code above build up the plot in "layers". Add comments (on the lines starting with `#`) to document what you notice.

```{r eval=FALSE}
# ???
ggplot(abby, aes(x = themes))
```

```{r eval=FALSE}
# ???
ggplot(abby, aes(x = themes)) +
    geom_bar()
```

```{r eval=FALSE}
# ???
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

```{r eval=FALSE}
# ???
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    theme_classic()
```



## Exercise 5: Exploring sentiment

We'll look at the distribution of the `afinn_overall` sentiment variable and associated summary statistics.

a. The code below creates a **boxplot** of this variable. In the comment, make note of how this code is simliar to the code for the barplot above. As in the previous exercise, *before* running the code chunk to create the plot, make note of what you expect the boxplot to look like.

```{r eval=FALSE}
# ???
ggplot(abby, aes(x = afinn_overall)) +
    geom_boxplot()
```

b. **Challenge:** Using the code for the barplot and boxplot as a guide, try to make a **histogram** and a **density** plot of the overall average ratings.
    - What information is given by the tallest bar of the histogram?
    - How would you describe the shape of the distribution?

```{r eval=FALSE}
# Histogram

# Density plot

```

c. We can compute summary statistics (numerical summaries) for a quantitative variable using the `summary()` function or with the `summarize()` function from the `dplyr` package. (`1st Qu.` and `3rd Qu.` stand for first and third quartile.) After inspecting these summaries, look back to your boxplot, histogram, and density plot. Which plots show which summaries most clearly?

```{r eval=FALSE}
# Summary statistics
# Using summary() - convenient for computing many summaries in one command
# Does not show the standard deviation
summary(abby$afinn_overall)

# Using summarize() from dplyr
# Note that we use %>% to pipe the data into the summarize() function
# We need to use na.rm = TRUE because there are missing values (NAs)
abby %>% 
    summarize(mean(afinn_overall, na.rm = TRUE), median(afinn_overall, na.rm = TRUE), sd(afinn_overall, na.rm = TRUE))
```

d. Write a good paragraph describing the information in the histogram (or density plot) by discussing shape, center, spread, and outliers. Incorporate the numerical summaries from part c.



## Exercise 6: Box plots vs. histograms vs. density plots

We took 3 different approaches to plotting the quantitative average course variable above. They all have pros and cons.

a. What is one pro about the boxplot in comparison to the histogram and density plot?
b. What is one con about the boxplot in comparison to the histogram and density plots?
c. In this example, which plot do you prefer and why?



## Exercise 7: Explore outliers

Given that Dear Abby column is an advice column, it seems natural that the sentiment of the questions would lean more negative. What's going on with the questions that have particularly positive sentiments?

We can use the `filter()` function in the `dplyr` package to look at the . Based on the plots of `afinn_overall` that you made in Exercise 5, pick a threshold for the `afinn_overall` variable---we'll say that questions with an overall sentiment score above this threshold are high outliers. Fill in this number where it says `YOUR_THRESHOLD` below.

```{r eval=FALSE}
abby %>% 
    filter(afinn_overall > YOUR_THRESHOLD) %>% 
    pull(question_only)
```

What do you notice? Why might these questions have such high sentiment scores?



## Exercise 8: Returning to our context, looking ahead

In this activity, we explored data on Dear Abby question, with a focus on exploring a single variable at a time.

- In big picture terms, what have we learned about Dear Abby questions?
- What further curiosities do you have about the data?



## Exercise 9: Different ways to think about data visualization 

In working with and visualizing data, it's important to keep in mind what a data point *represents*. It can reflect the experience of a real person. It might reflect the sentiment in a piece of art. It might reflect history. We've taken one very narrow and technical approach to data visualization. Check out the following examples, and write some notes about anything you find interesting.

- [Dear Data](http://www.dear-data.com/by-week)
- [W.E.B. DuBois](https://hyperallergic.com/476334/how-w-e-b-du-bois-meticulously-visualized-20th-century-black-america/)
- [Decolonizing Data Viz](https://stephanieevergreen.com/decolonizing-data-viz/)
- [Phase Change Project (by Prof Kim, Mac research students)](http://www.variableprojects.com/#/phase-change/)



## Exercise 10: Rendering your work

Save this file, and then click the "Render" button in the menu bar for this pane (blue arrow pointing right). This will create an HTML file containing all of the directions, code, and responses from this activity. A preview of the HTML will appear in the browser.

- Scroll through and inspect the document to see how your work was translated into this HTML format. Neat!
- Close the browser tab.
- Go to the "Background Jobs" pane in RStudio and click the Stop button to end the rendering process.
- Navigate to your "Activities" subfolder within your "STAT155" folder and locate the HTML file. You can open it again in your browser to double check.



## Reflection

Go to the top of this file and review the learning objectives for this lesson. Which objectives do you have a good handle on, are at least familiar with, or are struggling with? What feels challenging right now? What are some wins from the day?

> **Response:** Put your response here.




# Additional Practice

If you have time and want additional practice, try out the following exercises.

## Exercise 11: Read in and get to know the weather data

Daily weather data are available for 3 locations in Perth, Australia.

- View the codebook [here](https://github.com/Mac-STAT/data/blob/main/weather_3_locations_codebook.md).
- Complete the code below to read in the data.

```{r eval=FALSE}
# Replace the ??? with your own name for the weather data
# Replace the ___ with the correct function
??? <- ___("https://mac-stat.github.io/data/weather_3_locations.csv")
```



## Exercise 12: Exploring the data structure

Check out the basic features of the weather data.

```{r eval=FALSE}
# Examine the first six cases

# Find the dimensions of the data

```

What does a case represent in this data?



## Exercise 13: Exploring rainfall

The `raintoday` variable contains information about rainfall.

- Is this variable quantitative or categorical?
- Create an appropriate visualization, and compute appropriate numerical summaries.
- What do you learn about rainfall in Perth?

```{r eval=FALSE}
# Visualization

# Numerical summaries

```



## Exercise 14: Exploring temperature

The `maxtemp` variable contains information on the daily high temperature.

- Is this variable quantitative or categorical?
- Create an appropriate visualization, and compute appropriate numerical summaries.
- What do you learn about high temperatures in Perth?

```{r eval=FALSE}
# Visualization

# Numerical summaries

```


## Exercise 15: Customizing! (CHALLENGE)

Though you will naturally absorb some RStudio code throughout the semester, being an effective statistical thinker and "programmer" does not require that we memorize *all* code. That would be impossible! In contrast, using the *foundation* you built today, do some digging online to learn how to customize your visualizations.    

a. For the histogram below, add a title and more meaningful axis labels.  Specifically, title the plot "Distribution of max temperatures in Perth", change the x-axis label to "Maximum temperature" and y-axis label to "Number of days".  HINT: Do a Google search for something like "add axis labels ggplot".

```{r eval=FALSE}
# Add a title and axis labels
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram()
```

b. Adjust the code below in order to color the bars green.  NOTE: Color can be an effective tool, but here it is simply gratuitous.     

```{r eval=FALSE}
# Make the bars green
ggplot(weather, aes(x = raintoday)) + 
    geom_bar()
```

c. Check out the `ggplot2` [cheat sheet](https://rstudio.github.io/cheatsheets/data-visualization.pdf). Try making some of the other kinds of univariate plots outlined there.

d. What else would you like to change about your plot? Try it!



<br><br><br><br><br><br>



# Solutions


## Exercise 1: Get curious

- Results of brainstorming themes will vary
- From the "Data and Method" section at the end of the Pudding article, we see this paragraph:

> The writers of these questions likely skew roughly 2/3 female (according to Pauline Phillips, who mentions the demographics of responses to a survey she disseminated in 1987), and consequently, their interests are overrepresented; we’ve been unable to find other demographic data surrounding their origins. There is, doubtless, a level of editorializing here: only a fraction of the questions that people have written in have seen publication, because agony aunts (the writers of advice columns) must selectively filter what gets published. Nevertheless, the concerns of the day seem to be represented, such as the HIV/AIDS crisis in the 1980s. Additionally, we believe that the large sample of questions in our corpus (20,000+) that have appeared over recent decades gives a sufficient directional sense of broad trends.

- Writers of the questions are predominately female. The 2/3 proportion was estimated in 1987, so it would be useful to understand shifts in demographics over time.
- What questions were chosen to be answered on the column? Likely a small fraction of what got submitted. What themes tended to get cut out?



## Exercise 2: Importing and getting to know the data

a. Note how clicking the `abby` data causes both a popup pane and the command `View(abby)` to appear in the Console. In fact, the `View()` function is the underlying command that opens a dataset pane. (`View()` should always be entered in the Console and NOT your Quarto document.)

b. Each row / case corresponds to a single question.

c. Columns = variables

d. Try out each function below. Identify what each function tells you about the `abby` data and note this in the `???`:

```{r}
# First number = number of rows / cases
# Second number = number of columns / variables
dim(abby)

# Number of rows (cases)
nrow(abby)

# Number of columns (variables)
ncol(abby)

# View first few rows of the dataset (6 rows, by default)
head(abby)

# Get all column (variable) names
names(abby)
```

e. We can display the first 10 rows with `head(abby, n = 10)`.



## Exercise 3: Preparing to summarize and visualize the data

a. The sentiment variables are `afinn_overall`, `afinn_pos`, `afinn_neg`, and `bing_pos`, and they are **quantitative**. The `afinn` variables don't have units but we can still get a sense of the scale by remembering that each word gets a score between -5 and 5. The `bing_pos` variable doesn't have units because it's a fraction, but we know that it ranges from 0 to 1.

b. `theme` would be **categorical**.

c. Appropriate visualizations:
    - single quantitative variable: boxplot, histogram, density plot
    - single categorical variable: barplot



## Exercise 4: Exploring themes in the letters

a. Code will vary

b. Expectations about the plot will vary

```{r}
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

c. Counts in the table below match the barplot

```{r}
# Construct a table of counts
abby %>% 
    count(themes)
```

d. What do the plot layers do?

```{r}
# Just sets up the "canvas" of the plot with axis labels
ggplot(abby, aes(x = themes))
```

```{r}
# Adds the bars
ggplot(abby, aes(x = themes)) +
    geom_bar()
```

```{r}
# Rotates the x axis labels
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

```{r}
# Changes the visual theme of the plot with a white background and removes gridlines
ggplot(abby, aes(x = themes)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
    theme_classic()
```



## Exercise 5: Exploring course overall ratings

Now we'll look at the distribution of the `avg_rating` variable and associated summary statistics.

a.
    - We might expect the mean of this variable is less than zero given that more negative words might be appear in questions on an advice column.
    - The code has a similar structure to the barplot in that there is an initial `ggplot()` layer which sets the canvas, then a `+` to add a layer, then the final layer `geom_boxplot()` (like `geom_bar()`) which tells R what type of plot to make.

```{r}
ggplot(abby, aes(x = afinn_overall)) +
    geom_boxplot()
```

b. We replace `geom_boxplot()` with `geom_histogram()` and `geom_density()`.
    - The tallest bar of the histogram indicates that over 7500 questions had an overall `afinn` sentiment score between around -8 to 0.(The -8 to 0 comes from eyeballing where the tallest bar is placed on the x-axis, and the height of this bar indicates how many cases fall into that bin.)
    - The shape of the distribution: roughly symmetric

```{r}
# Histogram
ggplot(abby, aes(x = afinn_overall)) +
    geom_histogram()

# Density plot
ggplot(abby, aes(x = afinn_overall)) +
    geom_density()
```

c.
    - Boxplot shows min, max, median, 1st and 3rd quartile easily. (It shows median, 1st and 3rd quartile directly as lines)
    - Histogram and density plot show min and max but the mean and median aren't shown directly--we have to roughly guess based on the peak of the distribution

```{r}
# Summary statistics
summary(abby$afinn_overall)

abby %>% 
    summarize(mean(afinn_overall, na.rm = TRUE), median(afinn_overall, na.rm = TRUE), sd(afinn_overall, na.rm = TRUE))
```

d. The distribution of sentiment scores is roughly symmetric with a mean of -1.4 and a similar median of -1. The median and mean are quite similar because the distribution is fairly symmetric. The standard deviation of the sentiment scores is about 11.08 which tells us how much variation there is from the center of the distribution. 11.08 is somewhat high given the IQR of -6 to 3 (which is a span of 9 units).



## Exercise 6: Box plots vs. histograms vs. density plots

a. Boxplots very clearly show key summary statistics like median, 1st and 3rd quartile
b. Boxplots can oversimplify by not showing the shape of the distribution.



## Exercise 7: Explore outliers

There are some positive words in the questions that seem to pull up the sentiment score a lot despite the negative overall tone. From this we can see the limitations of a basic sentiment analysis in which the sentiment of each word is considered in isolation.

```{r}
abby %>% 
    filter(afinn_overall > 50) %>% 
    pull(question_only) %>% 
    head() # Just to look at first 6
```



## Exercise 8: Returning to our context, looking ahead

- Answers will vary


## Exercise 11: Read in and get to know the weather data

```{r}
weather <- read_csv("https://raw.githubusercontent.com/Mac-STAT/data/main/weather_3_locations.csv")
```



## Exercise 12: Exploring the data structure

Check out the basic features of the weather data.

```{r}
# Examine the first six cases
head(weather)

# Find the dimensions of the data
dim(weather)
```

A case represents a day of the year in a particular area (Hobart, Uluru, Wollongong as seen by the `location` variable).



## Exercise 13: Exploring rainfall

The `raintoday` variable contains information about rainfall.

- `raintoday` is categorical (No, Yes)
- It is more common to have no rain.

```{r}
# Visualization
ggplot(weather, aes(x = raintoday)) +
    geom_bar()

# Numerical summaries
weather %>% 
    count(raintoday)
```



## Exercise 14: Exploring temperature

The `maxtemp` variable contains information on the daily high temperature.

- `maxtemp` is quantitative
- The *typical* max temperature is around 23 degrees Celsius (with an average of 23.62 and a median of 22 degrees). The max temperatures ranged from 8.6 to 45.4 degrees. Finally, on the typical day, the max temp falls about 7.8 degrees from the mean. There are multiple modes in the distribution of max temperature---this likely reflects the different cities in the dataset.

```{r}
# Visualization
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram()

# Numerical summaries
summary(weather$maxtemp)

# There are missing values (NAs) in this variable, so we add
# the na.rm = TRUE argument
weather %>% 
    summarize(sd(maxtemp, na.rm = TRUE))
```


## Exercise 15: Customizing! (CHALLENGE)

a.

```{r}
ggplot(weather, aes(x = maxtemp)) + 
    geom_histogram() + 
    labs(x = "Maximum temperature", y = "Number of days", title = "Distribution of max temperatures in Perth")
```

b.   

```{r}
# Make the bars green
ggplot(weather, aes(x = raintoday)) + 
    geom_bar(fill = "green")
```

